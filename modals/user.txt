// const mongoose = require("mongoose");
// const validator = require("validator");
// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");

// const config = require("./config");

// const AdditionalDetailSchema = new mongoose.Schema({
//   experiences: [
//     {
//       company: String,
//       role: String,
//       from: Date,
//       to: Date,
//       location: String,
//       current: Boolean,
//     },
//   ],
//   education: [
//     {
//       institution: String,
//       fieldOfstudy: String,
//       from: Date,
//       to: Date,
//       current: Boolean,
//     },
//   ],
//   profileUrl: {
//     url: String,
//     required: true,
//     trim: true,
//   },
//   bio: {
//     type: String,
//     maxlength: 150,
//     required: false,
//   },
// });

// const userSchema = new mongoose.Schema(
//   //User Schema
//   {
//     name: {
//       type: String,
//       required: true,
//       trim: true, // TO GET RID OF ANY BLANK SPACES
//     },
//     email: {
//       type: String,
//       unique: true,
//       validate(value) {
//         if (!validator.isEmail(value)) {
//           throw new Error("Email is not valid");
//         }
//       },
//       trim: true,
//       lowercase: true,
//     },
//     password: {
//       type: String,
//       required: true,
//       trim: true,
//       minlenght: 7,
//       validate(value) {
//         if (value.includes("password")) {
//           throw new Error("Please set another passowrd");
//         }
//       },
//     },

//     completed: {
//       isCompleted: Boolean,
//       required: true,
//     },
//     details: AdditionalDetailSchema,
//     tokens: [
//       {
//         token: {
//           type: String,
//           required: true,
//         },
//       },
//     ],
//   },
//   {
//     /*SCHEMA OPTIONS */
//     discriminatorKey: "userType",
//     _id: false,
//   }
// );

// /*MENTEE SCHEMA*/
// const userSchema = new mongoose.Schema({
//   followedusers: [
//     {
//       name: String,
//       id: String,
//     },
//   ],
//   questions: [
//     {
//       questionsId: String,
//     },
//   ],
// });

// const userSchema = new mongooseSchema({
//   mentees: [
//     {
//       user_Id: String,
//       name: String,
//     },
//   ],
//   posts: [
//     {
//       post_ID: String,
//     },
//   ],
// });

// /*DISCRIMINATION */
// userSchema.path("details").discriminator("user", userSchema);
// userSchema.path("details").discriminator("mentee", MenteeSChema);

// //SCHEMA METHODS TO BE APPLIED ON user INSTANCE

// // userSchema.methods.generateAuthToken = async function () {
// //   const user = this;
// //   const token = jwt.sign({ _id: user.id.toString() }, config.jwt_token);
// //   user.tokens = user.tokens.concat({ token });
// //   await user.save();
// //   return token;
// // };

// // //STATICS TO BE APPLIED ON THE SCHEMA CLASS

// // userSchema.statics.findByCredentials = async (email, password) => {
// //   const user = await user.findOne({ email });
// //   if (!user) {
// //     throw new Error("THIS EMAIL IS NOT REGISTERED WITH ANY ACCOUNT");
// //   }
// //   const isMatch = await bcrypt.compare(password, user.password);
// //   if (!isMatch) {
// //     throw new Error("PLEASE CHECK THE LOGIN CREDENTIALS!");
// //   }
// //   return user;
// // };

// // //MOONGOOSE MIDDLEWARE TO HASH THE PASSWORD BEFORE SAVING

// // user.pre("save", async function (next) {
// //   const user = this;

// //   if (user.isModified("password")) {
// //     user.password = await bcrypt.hash(user.password, 8);
// //   }
// //   // JUST CONSOLE LOGGING IN TO CHECK
// //   console.log("just before saving");
// //   next();
// // });

// // const user = mongoose.model("user", userSchema);

// // module.exports = user;
